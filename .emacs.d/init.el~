;(server-start)  
;emacs --fg-daemon
;;(setq command-line-default-directory "D:/ahk/脚本管理/自启脚本/")
(require 'cl)
(require 'cl-lib)
(setq initial-frame-alist (quote ((fullscreen . maximized)))) 
;;historische Dateien
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
;; 设置垃圾回收，在Windows下，emacs25版本会频繁出发垃圾回收，所以需要设置 
(when (eq system-type 'windows-nt)
(setq gc-cons-threshold (* 512 1024 1024))
(setq gc-cons-percentage 0.5)
(run-with-idle-timer 5 t #'garbage-collect)
;; 显示垃圾回收信息，这个可以作为调试用
;; (setq garbage-collection-messages t) )
)
;; 
(require 'package)
(add-to-list 'load-path "~/.emacs.d/elpa/")
;; If you want to use latest version

;; If you want to use last tagged version
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
		      ("melpa" . "http://elpa.emacs-china.org/melpa/")))
(package-initialize)


;; dirty fix for having AC everywhere
;(define-globalized-minor-mode real-global-auto-complete-mode
;  auto-complete-mode (lambda ()
;                       (if (not (minibufferp (current-buffer)))
;                         (auto-complete-mode 1))
;                       ))
;(real-global-auto-complete-mode t)

;(global-set-key (kbd "<f5>") (lambda () (interactive)
;  (find-file "C:/Users/kingb/Documents/Org/todo.org")
;  (message "Opened:  %s" (buffer-name))))

;; (setq default-tab-width 4)	       
(setq ring-bell-function 'ignore)


(require 'cnfonts)
(cnfonts-enable)

;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
(set-face-attribute
 'default nil
 :font (font-spec :name "-outline-Source Code Pro-normal-italic-normal-mono-*-*-*-*-c-*-iso10646-1"
                  :weight 'normal
                  :slant 'normal
                  :size 12.5))
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font
   (frame-parameter nil 'font)
   charset
   (font-spec :name "-outline-微软雅黑-normal-normal-normal-sans-*-*-*-*-p-*-iso10646-1"
              :weight 'normal
              :slant 'normal
              :size 14.5)))


;; 打开org-indent mode
(setq org-startup-indented t)

;; 设置bullet list
(setq org-bullets-bullet-list '("+" "-" "→" "▶" "●" "○" "·" ))
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


;; über ORG
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; 编码设置 begin
(set-language-environment 'Chinese-GB)
;; default-buffer-file-coding-system变量在emacs23.2之后已被废弃，使用buffer-file-coding-system代替
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(setq-default pathname-coding-system 'euc-cn)
(setq file-name-coding-system 'euc-cn)
;; 另外建议按下面的先后顺序来设置中文编码识别方式。
;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
;; utf-16 (utf-16 实际上还细分为 utf-16le, utf-16be, utf-16le-with-signature等多种)
(prefer-coding-system 'cp950)
(prefer-coding-system 'gb2312)
(prefer-coding-system 'cp936)
;;(prefer-coding-system 'gb18030)
;(prefer-coding-system 'utf-16le-with-signature)
(prefer-coding-system 'utf-16)
;; 新建文件使用utf-8-unix方式
;; 如果不写下面两句，只写
;; (prefer-coding-system 'utf-8)
;; 这一句的话，新建文件以utf-8编码，行末结束符平台相关
(prefer-coding-system 'utf-8-dos)
(prefer-coding-system 'utf-8-unix)
;; 编码设置 end

;;Willkommensbildschirm abschalten
(setq inhibit-splash-screen t)

;;Notifikation für Org-mode
;;(defun wl-org-agenda-to-appt ()
;;  ;; Dangerous!!!  This might remove entries added by `appt-add' manually. 
;;  (org-agenda-to-appt t "TODO"))
;;
;;(wl-org-agenda-to-appt)
;;(defadvice  org-agenda-redo (after org-agenda-redo-add-appts)
;;  "Pressing `r' on the agenda will also add appointments."
;;  (progn
;;    (let ((config (current-window-configuration)))
;;      (appt-check t)
;;      (set-window-configuration config))
;;    (wl-org-agenda-to-appt)))
;;
;;(ad-activate 'org-agenda-redo)

;;(load-theme 'doom-nova t)

;;aktuelle Datei ausführen
(defun run-currentfile (&optional @fname)
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-01-18"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" $fpath t t))) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(global-set-key (kbd "C-M-<F11>") 'run-currentfile)
(fset 'speichern-und-laufen
      (kbd "C-x C-s C-M-<F11>"))
(global-set-key (kbd "M-s M-r") 'speichern-und-laufen)

;Zeilennummer immer anzeigen
;(global-linum-mode 1) ; always show line numbers                              
;(setq linum-format "%d| ")  ;set format

;;; custom org emhasis color
;(require 'org)
;(require 'cl)   ; for delete*
;(setq org-emphasis-alist
;      (cons '("+" '(:strike-through t :foreground "gray"))
;            (delete* "+" org-emphasis-alist :key 'car :test 'equal)))
;
;(setq org-emphasis-alist
;      (cons '("*" '(:emphasis t :foreground "#CD5C5C"))
;            (delete* "*" org-emphasis-alist :key 'car :test 'equal)))

;(set-background-color "F3F2EE")

;;dired
(setq dired-recursive-deletes t) ; 可以递归的删除目录 
(setq dired-recursive-copies t) ; 可以递归的进行拷贝 
;(require 'dired-x) ; 有些特殊的功能 
(global-set-key (kbd "C-x C-j") 'dired-jump) ; 通过 C-x C-j 跳转到当前目录的 Dired 
;(setq dired-guess-shell-alist-user
;(list
;(list "\\ .chm$" "xchm") 
;(list "\\ .rm$" "gmplayer") 
;(list "\\ .rmvb$" "gmplayer") 
;(list "\\ .avi$" "gmplayer") 
;(list "\\ .asf$" "gmplayer") 
;(list "\\ .wmv$" "gmplayer") 
;(list "\\ .htm$" "w3m") 
;(list "\\ .html$" "w3m") 
;(list "\\ .mpg$" "gmplayer") 
;) 
;) ; 设置一些文件的默认打开方式，此功能必须在(require 'dired-x)之后 


;;Syntaxhervorhebung in Org-mode
(setq org-src-fontify-natively t)

(with-eval-after-load 'org
  ;; Org 模式相关设定
(add-hook 'org-mode-hook (lambda () (org-cdlatex-mode 1)))
  )

;;muti-steuren
(require 'multiple-cursors)
;; C-M-m 被占用，设定M-g为虚修饰键，来获得最高优先权
;(define-key key-translation-map (kbd "C-z-m") (kbd "M-g S-M-m"))
(global-set-key (kbd "C-c m") 'mc/edit-lines)

;;自动换行
(add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
(add-hook 'eww-mode-hook (lambda () (setq truncate-lines nil)))
(add-hook 'org-agenda-mode-hook (lambda () (setq truncate-lines nil)))
;;ersetzen
;(defvar count 0)
;(let ((count 0)))
;(defun f-incf (&optional first incr repeat)
;  (let ((index (floor (/ (cl-incf count 0) (or repeat 1)))))
;    (+ (or first 1) (* (or incr 1) index))))(defun f-incf (&optional first incr repeat)
;  (let ((index (floor (/ (cl-incf count 0) (or repeat 1)))))
;    (+ (or first 1) (* (or incr 1) index))))


;;überflüssige Buffer überspringen
(defun f-normal-buffer ()
  (or (not buffer-read-only)
      (buffer-file-name)))

(defun c-switch-to-next-buffer ()
  (interactive)
  (unless (minibufferp)
    (let ((p t) (bn (buffer-name)))
      (switch-to-next-buffer)
      (while (and p (not (f-normal-buffer)))
	(switch-to-next-buffer)
	(when (string= bn (buffer-name)) (setq p nil))))))


(defun c-switch-to-prev-buffer ()
  (interactive)
  (unless (minibufferp)
    (let ((p t) (bn (buffer-name)))
      (switch-to-prev-buffer)
      (while (and p (not (f-normal-buffer)))
	(switch-to-prev-buffer)
	(when (string= bn (buffer-name)) (setq p nil))))))

(global-set-key (kbd "<f11>") 'c-switch-to-prev-buffer)
(global-set-key (kbd "<f12>") 'c-switch-to-next-buffer)

;;ganz Linie auswählen
(fset 'select-hole-line
      (kbd "C-a C-SPC C-e C-e"))
(global-set-key (kbd "C-c C-k") 'select-hole-line)

;;leere Zeilen und [^|M] löschen
(fset 'delete-empty-lines (kbd "M-x flush-lines RET ^\s-*$ RET M-x replace-string RET C-q C-m RET"))

;;org-download
;;(require 'org-download)
;; Drag-and-drop to `dired`
;;(add-hook 'dired-mode-hook 'org-download-enable)

;;überprüfen, ob Emacs die unteren Phototypen unterstützt
(image-type-available-p 'png)
(image-type-available-p 'jpeg)
(image-type-available-p 'gif)
(image-type-available-p 'tiff)
(image-type-available-p 'xbm)
(image-type-available-p 'xpm)
(image-type-available-p 'imagemagick)

;;org todo Schlüsselwörter
(setq org-todo-keywords
      '((sequence "TODO(t!)" "NEXT(n!)" "Waiting(w!)" "|" "DONE(d!)" "failed(f@)")))

(fset 'weiss-todo-todo
      (kbd "C-c C-t t"))
(fset 'weiss-todo-next
      (kbd "C-c C-t n"))
(fset 'weiss-todo-waiting
      (kbd "C-c C-t w"))
(fset 'weiss-todo-done
      (kbd "C-c C-t d"))
(fset 'weiss-todo-failed
      (kbd "C-c C-t f"))

;;autoNamekopieren
(defun run-autokopieren()
  (interactive)
  (w32-shell-execute "open"  "AutoHotkey.exe" "D:\\ahk\\脚本管理\\常用脚本\\autokopieren.ahk")
  )
(global-set-key (kbd "C-c r") 'run-autokopieren)

;;Bildgröße einstellen
(setq org-image-actual-width 100)
;(setq org-image-actual-width (/ (display-pixel-width) 4))


;;调用 Path 和 exec-path 变量
;;http://www.voidcn.com/article/p-njdtbsvu-oy.html
;(defun wttr/prepend-to-exec-path (path)
;  "prepand the path to the emacs intenral `exec-path' and \"PATH\" env variable.
;Return the updated `exec-path'"
;  (setenv "PATH" (concat (expand-file-name path)
;                         path-separator
;                         (getenv "PATH")))
;  (setq exec-path
;        (cons (expand-file-name path)
;              exec-path)))
;
;(mapc #'wttr/prepend-to-exec-path
;        (reverse 
;         '("C:/Program Files (x86)/ImageMagick-6.2.7-Q16"
;           )))

;Evil und Evil-org werden außer Kraft treten, wenn die später als *.org laufen

;;evil-leader laufen
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  ";" 'evilnc-comment-or-uncomment-lines
  "r" 'speichern-und-laufen
  "f" 'find-file
  "c" 'scroll-other-window-down
  "v" 'scroll-other-window
 ; "z" 'c-switch-to-prev-buffer
 ; "x" 'c-switch-to-next-buffer
  "b" 'ido-switch-buffer
  "s" 'bookmarks-suchen 
  "tt" 'weiss-todo-todo
  "tn" 'weiss-todo-next
  "tw" 'weiss-todo-waiting
  "td" 'weiss-todo-done
  "tf" 'weiss-todo-failed
  "aa" 'auto-archive
  "h" 'org-metaleft
  "j" 'org-metadown
  "k" 'org-metaup
  "l" 'org-metaright
  "gh" 'org-shiftmetaleft
  "gl" 'org-shiftmetaright
  "i" 'counsel-imenu
  "qr" 'recentf-open-files
  "p" 'weiss-show-pictures
  "de" 'Tag-auswählen-Emacs
  "di" 'Tag-auswählen-Imas
  "dk" 'Tag-auswählen-Einkaufslist
  "dl" 'Tag-auswählen-List
  "da" 'Tag-auswählen-Artikel
)

;;;evil laufen
(add-to-list 'load-path "~/.emacs.d/evil")
   (require 'evil)
   (evil-mode 1)


;;evil-org laufen
(add-to-list 'load-path "~/.emacs.d/plugins/evil-org")
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects todo additional calendar heading))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

;;automatisch Datei öffen
(find-file "C:/Program Files/emax64/.emacs.d/init.el") 
(find-file "C:/Users/kingb/Documents/Org/Kenntnisse.org")
(find-file "C:/Users/kingb/Documents/Org/todo.org")
(find-file "C:/Users/kingb/Documents/Org/Einsammlung.org")
(find-file "c:/Users/kingb/Documents/Org/Vorlesungen.org")
(find-file "c:/Users/kingb/Documents/Org/Zusammenhang.org")

;(add-hook 'org-mode-hook 'turn-on-cdlatex)

(add-hook 'org-mode-hook (lambda () (org-cdlatex-mode 1)))

;;todo Abhängigkeit durchsetzen
(setq org-enforce-todo-dependencies t)

;;Hervorhebung von unterschiedlichen Todo-Schlüsselwörter
;;"color" bedeutet Background color, variable: Org-faces-easy-properites(augenschelich muss "customize" klicken und verändern, aber nicht manuell verändern)
(setq org-todo-keyword-faces
      '(("TODO" . "cornflower blue")
	("NEXT" . "slate blue")
	("Waiting" . "light gray")))
;; Erbschaft der Tags löschen
;(setq org-tags-exclude-from-inheritance t)

;;schnell Tag "Bookmarks" filten
(setq org-agenda-custom-commands '(("b" occur-tree ":Bookmarks:")))
;(defun switch-to-Einsammlung ()
;  (interactive)
;  (unless (minibufferp)
;    (let ((p t) (bn (buffer-name)))
;      (switch-to-next-buffer)
;      (while (and p (not (f-normal-buffer)))
;	(switch-to-next-buffer)
;	(when ((buffer-name)= "Einsammlung.org") (setq p nil))))))

(defun weiss-show-pictures()
(interactive)
(org-toggle-latex-fragment)
(iimage-mode 1)
)
(plist-put org-format-latex-options :scale 2)

(fset 'bookmarks-suchen
   ;   (switch-to-buffer "Einsammlung.org")
      (kbd "M-p E C-c a b"))

(defun switch-and-bookmarks-suchen()
  (interactive)
    (switch-to-buffer "Einsammlung.org")
    )
(global-set-key "\M-pE" 'switch-and-bookmarks-suchen)

;;Hotkey von org capture einstellen
;(setq org-default-notes-file (concat org-directory "C:/Users/kingb/Documents/Org/todo.org"))
;(define-key global-map "\C-cc" 'orgcapture)

;;öffnen emacs mit Vollbild
;;(require 'maxframe-settings)

;;Cursor verändern
;(require 'cursor-change)
;(setq ido-enable-flex-matching t)
;(setq ido-use-filename-at-point 'guess)
;(setq ido-everywhere t)          
;(cursor-change-mode 1)

;;ido laufen
(require 'ido)
(ido-mode t)

;; Ordnung der Agenda
;(setq org-agenda-files '("C:/Users/kingb/Documents/Org/*.org"))
(setq org-agenda-files (file-expand-wildcards "C:/Users/kingb/Documents/Org/*.org"))
;;(setq org-agenda-files '("~/org"))
;(setq org-agenda-files (list "C:/Users/kingb/Documents/Org/*.org"))
;;(load-library "find-lisp")
;;(setq org-agenda-files (find-lisp-find-files "C:/Users/kingb/Documents/Org" "\.org$"))
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path 'file)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;以 y/n 替代 yes/no 
(fset 'yes-or-no-p 'y-or-n-p) 

;;配置 cygwin
(setenv "PATH" (concat "c:/cygwin64/bin;" (getenv "PATH")))
(setq exec-path (cons "c:/cygwin64/bin/" exec-path))
(require 'cygwin-mount)
(cygwin-mount-activate)

(add-hook 'comint-output-filter-functions
    'shell-strip-ctrl-m nil t)
(add-hook 'comint-output-filter-functions
    'comint-watch-for-password-prompt nil t)
(setq explicit-shell-file-name "bash.exe")
;; For subprocesses invoked via the shell
;; (e.g., "shell -c command")
(setq shell-file-name explicit-shell-file-name)


;; Farben der Cursor in unterschiedlichen Status verändern
(setq evil-visual-state-cursor '("green" box))
(setq evil-normal-state-cursor '("cornflower blue" bar))
(setq evil-insert-state-cursor '("red" bar))

(add-hook 'after-init-hook 'global-company-mode)
; behindert company-mode in org-mode
(setq company-global-modes '(not org-mode))

;(evil-define-key 'normal evil-org-mode-map

;Command schauen
(require 'command-log-mode)
(add-hook 'LaTeX-mode-hook 'command-log-mode)


(fset 'org-auto-archive
      (kbd "C-u C-c C-x C-s"))

(require 'highlight-parentheses)
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)


(global-auto-revert-mode t)

;(add-to-list 'load-path "folder-in-which-visual-regexp-files-are-in/") ;; if the files are not already in the load path
(require 'visual-regexp)

;; aktuelle Zeile hervorheben
;(global-hl-line-mode 1)

(require 'hungry-delete)
(global-hungry-delete-mode)

(defun auto-archive()
  (interactive)
  (setq current-prefix-arg '(4)) ;;C-u
  (call-interactively 'org-archive-subtree))

(require 'smartparens-config)
;(add-hook 'Emacs-Lisp-mode-hook #'smartparens-mode)
(smartparens-global-mode t)

(setq ns-pop-up-frames nil)


(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

(with-eval-after-load 'dired ;;dired-mode-map wird nach dem Lauf von dired erst entsteht. D.h Beim Start von Emacs wird Fehler gemeldet, wenn es nur der untere Satz gibt.  
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)) ;;öffnen Dateien oder Ordnung im gleichen Buffer


;; "'" nicht automatisch vollenden
(sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)


(setq-default org-fast-tag-selection-single-key 't)

;;durch Evil-leader Org Tag auswählen
(fset 'Tag-auswählen-Emacs
      (kbd "C-c C-c e"))
(fset 'Tag-auswählen-Imas
      (kbd "C-c C-c i"))
(fset 'Tag-auswählen-Einkaufslist
      (kbd "C-c C-c k"))
(fset 'Tag-auswählen-List
      (kbd "C-c C-c l"))
(fset 'Tag-auswählen-Artikel
      (kbd "C-c C-c a"))

(require 'popwin)
(popwin-mode 1)

;(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;(global-set-key (kbd "M-x") 'counsel-M-x)
;(global-set-key "\C-s" 'swiper)
(setq-default pop-up-frames 'nil)

;;Arichved Tree kann in Org-Agenda auch sehen
(setq-default org-agenda-skip-archived-trees 'nil)

(require 'auto-save)
(auto-save-enable)          
(setq auto-save-slient t)    

;; Automatic latex image toggling when cursor is on a fragment
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(require 'evil-surround)
(global-evil-surround-mode)

(evilnc-default-hotkeys)
;; turn on transient mark mode
;;(that is, we highlight the selected text)
(transient-mark-mode t)

(setq my-tab-width 1)

(defun indent-block()
  (shift-region my-tab-width)
  (setq deactivate-mark nil))

(defun unindent-block()
  (shift-region (- my-tab-width))
  (setq deactivate-mark nil))

(defun shift-region(numcols)
" my trick to expand the region to the beginning and end of the area selected
 much in the handy way I liked in the Dreamweaver editor."
  (if (< (point)(mark))
    (if (not(bolp))    (progn (beginning-of-line)(exchange-point-and-mark) (end-of-line)))
    (progn (end-of-line)(exchange-point-and-mark)(beginning-of-line)))
  (setq region-start (region-beginning))
  (setq region-finish (region-end))
  (save-excursion
    (if (< (point) (mark)) (exchange-point-and-mark))
    (let ((save-mark (mark)))
      (indent-rigidly region-start region-finish numcols))))

(defun indent-or-complete ()
  "Indent region selected as a block; if no selection present either indent according to mode,
or expand the word preceding point. "
  (interactive)
  (if  mark-active
      (indent-block)
    (if (looking-at "\\>")
  (hippie-expand nil)
      (insert "    "))))

(defun my-unindent()
  "Unindent line, or block if it's a region selected.
When pressing Shift+tab, erase words backward (one at a time) up to the beginning of line.
Now it correctly stops at the beginning of the line when the pointer is at the first char of an indented line. Before the command would (unconveniently)  kill all the white spaces, as well as the last word of the previous line."

  (interactive)
  (if mark-active
      (unindent-block)
    (progn
      (unless(bolp)
        (if (looking-back "^[ \t]*")
            (progn
              ;;"a" holds how many spaces are there to the beginning of the line
              (let ((a (length(buffer-substring-no-properties (point-at-bol) (point)))))
                (progn
                  ;; delete backwards progressively in my-tab-width steps, but without going further of the beginning of line.
                  (if (> a my-tab-width)
                      (delete-backward-char my-tab-width)
                    (backward-delete-char a)))))
          ;; delete tab and spaces first, if at least 2 exist, before removing words
          (progn
            (if(looking-back "[ \t]\\{2,\\}")
                (delete-horizontal-space)
              (backward-kill-word 1))))))))

(add-hook 'find-file-hooks (function (lambda ()
 (unless (eq major-mode 'org-mode)
(local-set-key (kbd "<tab>") 'indent-or-complete)))))

(if (not (eq  major-mode 'org-mode))
    (progn
      (define-key global-map "\t" 'indent-or-complete) ;; with this you have to force tab (C-q-tab) to insert a tab after a word
      (define-key global-map [S-tab] 'my-unindent)
      (define-key global-map [C-S-tab] 'my-unindent)))

;; mac and pc users would like selecting text this way
(defun dave-shift-mouse-select (event)
 "Set the mark and then move point to the position clicked on with
 the mouse. This should be bound to a mouse click event type."
 (interactive "e")
 (mouse-minibuffer-check event)
 (if mark-active (exchange-point-and-mark))
 (set-mark-command nil)
 ;; Use event-end in case called from mouse-drag-region.
 ;; If EVENT is a click, event-end and event-start give same value.
 (posn-set-point (event-end event)))

;; be aware that this overrides the function for picking a font. you can still call the command
;; directly from the minibufer doing: "M-x mouse-set-font"
(define-key global-map [S-down-mouse-1] 'dave-shift-mouse-select)

;; to use in into emacs for  unix I  needed this instead
; define-key global-map [S-mouse-1] 'dave-shift-mouse-select)

(require 'unicad)
